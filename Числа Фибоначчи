<- наивный ->

fib :: Int -> Int
fib 0 = 1
fib 1 = 1
fib n = fib (n-1) + fib (n-2)


<- хвост рекурсивный ->

fib2 = tailFib 0 1 0 

tailFib prev1 prev2 start end 
          | start == end = next
          | otherwise = tailFib next prev1 (start + 1) end
          where next = prev1 + prev2



<- с использованием мемоизации ->
import Data.MemoTrie

fib :: Int -> Int
fib 0 = 0
fib 1 = 1
fib n = fib (n - 1) + fib (n - 2)

fib' :: Int -> Int
fib' n = fib'' n
  where
    mfib = memo fib'
    fib'' 0 = 0
    fib'' 1 = 1
    fib'' n = mfib (n - 1) + mfib (n - 2)

main = do
  print $ fib'(40)
